context.spa-libs = {
    api.alsa.*      = alsa/libspa-alsa
    api.bluez5.*    = bluez5/libspa-bluez5
    api.v4l2.*      = v4l2/libspa-v4l2
    api.libcamera.* = libcamera/libspa-libcamera
    audio.convert.* = audioconvert/libspa-audioconvert
    support.*       = support/libspa-support
}

context.modules = [
    {
        name = libpipewire-module-rt
        args = {
            nice.level   = -11
        }
        flags = [ ifexists, nofail ]
    }
    { name = libpipewire-module-protocol-native }
    { name = libpipewire-module-metadata }
]

wireplumber.profiles = {
    main = {
        check.no-media-session = required
        metadata.sm-settings = required
        support.settings = required
        support.log-settings = disabled
        metadata.sm-objects = required
        hardware.audio = required
        hardware.bluetooth = disabled
        hardware.video-capture = disabled
        policy.standard = required
    }
}

wireplumber.components = [
    {
        name = ensure-no-media-session, type = built-in
        provides = check.no-media-session
    }
    {
        name = export-core, type = built-in
        provides = support.export-core
    }
    {
        name = libpipewire-module-client-node, type = pw-module
        provides = pw.client-node
        wants = [ support.export-core ]
    }
    {
        name = libpipewire-module-client-device, type = pw-module
        provides = pw.client-device
        wants = [ support.export-core ]
    }
    {
        name = libpipewire-module-spa-node-factory, type = pw-module
        provides = pw.node-factory.spa
        requires = [ pw.client-node ]
    }
    {
        name = libpipewire-module-adapter, type = pw-module
        provides = pw.node-factory.adapter
        requires = [ pw.client-node ]
    }
    {
        name = libwireplumber-module-settings, type = module
        arguments = { metadata.name = sm-settings }
        provides = metadata.sm-settings
    }
    {
        name = settings-instance, type = built-in
        arguments = { metadata.name = sm-settings }
        provides = support.settings
    }
    {
        name = libwireplumber-module-log-settings, type = module
        provides = support.log-settings
    }
    {
        name = libwireplumber-module-lua-scripting, type = module
        provides = support.lua-scripting
    }
    {
        name = libwireplumber-module-standard-event-source, type = module
        provides = support.standard-event-source
    }
    {
        name = libwireplumber-module-dbus-connection, type = module
        provides = support.dbus
    }
    {
        name = libwireplumber-module-portal-permissionstore, type = module
        provides = support.portal-permissionstore
        requires = [ support.dbus ]
    }
    {
        name = libwireplumber-module-reserve-device, type = module
        provides = support.reserve-device
        requires = [ support.dbus ]
    }
    {
        name = libwireplumber-module-logind, type = module
        provides = support.logind
    }
    {
        name = libwireplumber-module-si-node, type = module
        provides = si.node
    }
    {
        name = libwireplumber-module-si-audio-adapter, type = module
        provides = si.audio-adapter
    }
    {
        name = libwireplumber-module-si-standard-link, type = module
        provides = si.standard-link
    }
    {
        name = libwireplumber-module-si-audio-virtual, type = module
        provides = si.audio-virtual
    }
    {
        name = libwireplumber-module-default-nodes-api, type = module
        provides = api.default-nodes
    }
    {
        name = libwireplumber-module-mixer-api, type = module
        provides = api.mixer
    }
    {
        name = libwireplumber-module-file-monitor-api, type = module
        provides = api.file-monitor
    }
    {
        name = metadata.lua, type = script/lua
        arguments = { metadata.name = default }
        provides = metadata.default
    }
    {
        name = metadata.lua, type = script/lua
        arguments = { metadata.name = filters }
        provides = metadata.filters
    }
    {
        name = sm-objects.lua, type = script/lua
        provides = metadata.sm-objects
    }
    {
        type = virtual, provides = monitor.alsa.reserve-device,
        requires = [ support.reserve-device ]
    }
    {
        type = virtual, provides = monitor.alsa-midi.monitoring,
        requires = [ api.file-monitor ]
    }
    {
        type = virtual, provides = monitor.bluez.seat-monitoring,
        requires = [ support.logind ]
    }
    {
        name = monitors/alsa.lua, type = script/lua
        provides = monitor.alsa
        requires = [ support.export-core, pw.client-device ]
        wants = [ monitor.alsa.reserve-device ]
    }
    {
        name = monitors/bluez.lua, type = script/lua
        provides = monitor.bluez
        requires = [ support.export-core,
                     pw.client-device,
                     pw.client-node,
                     pw.node-factory.adapter ]
        wants = [ monitor.bluez.seat-monitoring ]
    }
    {
        name = monitors/bluez-midi.lua, type = script/lua
        provides = monitor.bluez-midi
        requires = [ support.export-core,
                     pw.client-device,
                     pw.client-node,
                     pw.node-factory.spa ]
        wants = [ monitor.bluez.seat-monitoring ]
    }
    {
        name = monitors/alsa-midi.lua, type = script/lua
        provides = monitor.alsa-midi
        wants = [ monitor.alsa-midi.monitoring ]
    }
    {
        name = monitors/v4l2/name-device.lua, type = script/lua
        provides = hooks.monitor.v4l2-name-device
        requires = [ support.export-core,
                     support.standard-event-source ]
    }
    {
        name = monitors/v4l2/create-device.lua, type = script/lua
        provides = hooks.monitor.v4l2-create-device
        requires = [ support.export-core,
                     pw.client-device,
                     support.standard-event-source ]
    }
    {
        name = monitors/v4l2/name-node.lua, type = script/lua
        provides = hooks.monitor.v4l2-name-node
        requires = [ support.export-core,
                     support.standard-event-source ]
    }
    {
        name = monitors/v4l2/create-node.lua, type = script/lua
        provides = hooks.monitor.v4l2-create-node
        requires = [ support.export-core,
                     support.standard-event-source ]
    }
    {
        type = virtual, provides = monitor.v4l2.hooks
        wants = [ hooks.monitor.v4l2-name-device,
                  hooks.monitor.v
                  4l2-create-device,
                  hooks.monitor.v4l2-name-node,
                  hooks.monitor.v4l2-create-node ]
    }
    {
        name = monitors/libcamera.lua, type = script/lua
        provides = monitor.libcamera
        requires = [ support.export-core,
                     pw.client-device,
                     pw.client-node,
                     pw.node-factory.adapter ]
    }
    {
        name = hooks/alsa-reserve-device.lua, type = script/lua
        provides = hooks.reserve-device.alsa
        requires = [ support.reserve-device ]
    }
    {
        name = hooks/bluez-seat-monitor.lua, type = script/lua
        provides = hooks.seat-monitor.bluez
        requires = [ support.logind ]
    }
    {
        name = hooks/si-device.lua, type = script/lua
        provides = hooks.device.si
    }
    {
        name = hooks/si-audio-device.lua, type = script/lua
        provides = hooks.device.si-audio
    }
    {
        name = hooks/si-audio-port.lua, type = script/lua
        provides = hooks.port.si-audio
    }
    {
        name = hooks/si-audio-link.lua, type = script/lua
        provides = hooks.link.si-audio
    }
    {
        name = hooks/si-standard-link.lua, type = script/lua
        provides = hooks.link.si-standard
    }
    {
        name = hooks/si-adapter.lua, type = script/lua
        provides = hooks.adapter.si
    }
    {
        name = hooks/si-device-reset.lua, type = script/lua
        provides = hooks.device-reset.si
    }
    {
        name = hooks/portal-permission-store.lua, type = script/lua
        provides = hooks.portal-permission-store
        requires = [ support.portal-permissionstore ]
    }
    {
        name = hooks/logind.lua, type = script/lua
        provides = hooks.logind
        requires = [ support.logind ]
    }
    {
        name = hooks/launch-on-connect.lua, type = script/lua
        provides = hooks.launch-on-connect
    }
    {
        name = hooks/suspend-resume.lua, type = script/lua
        provides = hooks.suspend-resume
    }
    {
        name = hooks/libcamera.lua, type = script/lua
        provides = hooks.libcamera
        requires = [ support.export-core,
                     pw.client-device,
                     pw.client-node,
                     pw.node-factory.adapter ]
    }
    {
        name = hooks/alsa-device.lua, type = script/lua
        provides = hooks.device.alsa
    }
    {
        name = hooks/alsa-jack.lua, type = script/lua
        provides = hooks.jack.alsa
    }
    {
        name = hooks/alsa-ctl.lua, type = script/lua
        provides = hooks.ctl.alsa
    }
    {
        name = hooks/alsa-device-access.lua, type = script/lua
        provides = hooks.device-access.alsa
    }
    {
        name = hooks/alsa-device-switch.lua, type = script/lua
        provides = hooks.device-switch.alsa
    }
    {
        name = hooks/bluez-device.lua, type = script/lua
        provides = hooks.device.bluez
    }
    {
        name = hooks/bluez5-device.lua, type = script/lua
        provides = hooks.device.bluez5
    }
    {
        name = hooks/bluez5-profile.lua, type = script/lua
        provides = hooks.profile.bluez5
    }
    {
        name = hooks/bluez-device-policy.lua, type = script/lua
        provides = hooks.policy.bluez
    }
    {
        name = hooks/bluez5-device-policy.lua, type = script/lua
        provides = hooks.policy.bluez5
    }
    {
        name = hooks/bluez5-monitor.lua, type = script/lua
        provides = hooks.monitor.bluez5
    }
    {
        name = hooks/v4l2-device.lua, type = script/lua
        provides = hooks.device.v4l2
    }
    {
        name = hooks/v4l2-device-access.lua, type = script/lua
        provides = hooks.device-access.v4l2
    }
    {
        name = hooks/v4l2-device-switch.lua, type = script/lua
        provides = hooks.device-switch.v4l2
    }
]

wireplumber.components.rules = [
    {
        matches = [
            {
                type = "script/lua"
            }
        ]
        actions = {
            merge = {
                requires = [ support.lua-scripting ]
            }
        }
    }
]


wireplumber.settings.schema = {
  ## Bluetooth
  bluetooth.use-persistent-storage = {
    description = "Whether to use persistent BT storage or not"
    type = "bool"
    default = true
  }
  bluetooth.autoswitch-to-headset-profile = {
    description = "Whether to autoswitch to BT headset profile or not"
    type = "bool"
    default = true
  }

  ## Device
  device.restore-profile = {
    description = "Whether to restore device profile or not"
    type = "bool"
    default = true
  }
  device.restore-routes = {
    description = "Whether to restore device routes or not"
    type = "bool"
    default = true
  }
  device.routes.default-sink-volume = {
    description = "The default volume for sink devices"
    type = "float"
    default = 0.064
    min = 0.0
    max = 1.0
  }
  device.routes.default-source-volume = {
    description = "The default volume for source devices"
    type = "float"
    default = 1.0
    min = 0.0
    max = 1.0
  }

  ## Linking
  linking.allow-moving-streams = {
    description = "Whether to allow metadata to move streams at runtime or not"
    type = "bool"
    default = true
  }
  linking.follow-default-target = {
    description = "Whether to allow streams follow the default device or not"
    type = "bool"
    default = true
  }

  ## Monitor
  monitor.camera-discovery-timeout = {
    description = "The camera discovery timeout in milliseconds"
    type = "int"
    default = 100
    min = 0
    max = 60000
  }

  ## Node
  node.features.audio.no-dsp = {
    description = "Whether to never convert audio to F32 format or not"
    type = "bool"
    default = false
  }
  node.features.audio.monitor-ports = {
    description = "Whether to enable monitor ports on audio nodes or not"
    type = "bool"
    default = true
  }
  node.features.audio.control-port = {
    description = "Whether to enable control ports on audio nodes or not"
    type = "bool"
    default = false
  }
  node.stream.restore-props = {
    description = "Whether to restore properties on stream nodes or not"
    type = "bool"
    default = true
  }
  node.stream.restore-target = {
    description = "Whether to restore target on stream nodes or not"
    type = "bool"
    default = true
  }
  node.stream.default-playback-volume = {
    description = "The default volume for playback nodes"
    type = "float"
    default = 1.0
    min = 0.0
    max = 1.0
  }
  node.stream.default-capture-volume = {
    description = "The default volume for capture nodes"
    type = "float"
    default = 1.0
    min = 0.0
    max = 1.0
  }
  node.filter.forward-format = {
    description = "Whether to forward format on filter nodes or not"
    type = "bool"
    default = false
  }
  node.restore-default-targets = {
    description = "Whether to restore default targets or not"
    type = "bool"
    default = true
  }
}
